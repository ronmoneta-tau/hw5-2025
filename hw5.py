import pathlib
import numpy as np
import pandas as pd
from typing import Union, Tuple


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        if isinstance(data_fname, str):
            data_fname = pathlib.Path(data_fname)
        elif not isinstance(data_fname, pathlib.Path):
            raise TypeError("data_fname must be a string or a pathlib.Path object.")
        if not data_fname.exists():
            raise ValueError(f"File {data_fname} does not exist.")

        self.data_fname = data_fname
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)
        # self.data = self.clean_data(unclean_data)


    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

    Returns
    -------
    hist : np.ndarray
      Number of people in a given bin
    bins : np.ndarray
      Bin edges
        """
        hist, edges = np.histogram(self.data["age"], bins=np.arange(0, 101, 10))
        return hist, edges

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
      A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
      the (ordinal) index after a reset.
        """

        valid_emails = self.data['email'].apply(self.is_valid_email)
        corrected_df = self.data[valid_emails].reset_index(drop=True)
        return corrected_df

    @staticmethod
    def is_valid_email(email: str) -> bool:
        """
        Checks if the given email address is valid according to the specified rules:
        A valid email address is one that follows these conditions:
        Contains exactly one "@" sign, but doesn't start or end with it.
        Contains a "." sign, but doesn't start or end with it.
        The letter following the "@" sign (i.e, appears after it) must not be "." .
        :param email: str
        :return: True if the email is valid, False otherwise.
        """
        if email.count('@') != 1 or email.startswith('@') or email.endswith('@'):
            return False
        if email.count('.') == 0 or email.startswith('.') or email.endswith('.'):
            return False
        at_index = email.index('@')
        if email[at_index + 1] == '.':
            return False

        return True

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
      The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
          Row indices of the students that their new grades were generated
        """
        df = self.data.copy()
        questions_columns = ["q1", "q2", "q3", "q4", "q5"]
        rows_with_na = df[df[questions_columns].isna().any(axis=1)]
        rows_indices = rows_with_na.index.to_numpy()

        for index in rows_indices:
            row = df.loc[index, questions_columns]
            mean_value = row.mean(skipna=True)
            df.loc[index, questions_columns] = row.fillna(mean_value)

        return df, rows_indices

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """

        df = self.data.copy()
        questions_columns = ["q1", "q2", "q3", "q4", "q5"]
        df["score"] = np.nan

        for index, row in df.iterrows():
            nans_count = row[questions_columns].isna().sum()
            if nans_count <= maximal_nans_per_sub:
                score = row[questions_columns].mean(skipna=True)
                df.at[index, "score"] = np.floor(score)


        df["score"] = df["score"].astype(pd.UInt8Dtype())
        return df